pipeline {
    agent any
    
    environment {
        mongoContainerName = 'work-flow-mongodb' // Container MongoDB
        redisContainerName = 'work-flow-redis' // Container Redis
        location = 'Asia/Ho_Chi_Minh'
        htmlDir = '/var/www/html'
        springAppDir = '/opt/tomcat/webapps/work-flow'
        backupDir = '/data'
        dbName = 'work-flow'
        dropDb = false
    }

    stages {
        stage('Preparation') {
            steps {
                cleanWs()
                script {
                    def dateTime = sh(script: "TZ=${location} date +%Y%m%d_%H%M%S", returnStdout: true).trim()
                    def mongoExists = sh(script: "docker ps -q -f name=${mongoContainerName}", returnStdout: true).trim()
                    def redisExists = sh(script: "docker ps -q -f name=${redisContainerName}", returnStdout: true).trim()

                    env.backupFileMongo = "${backupDir}/mongo_backup_${dateTime}.gz"
                    env.backupFileRedis = "${backupDir}/redis_backup_${dateTime}.rdb"

                    env.mongoExists = "${mongoExists}"
                    env.redisExists = "${redisExists}"
                }
            }
        }

        stage('Backup') {
            steps {
                script {
                    if (env.mongoExists) {
                        echo "Creating backup for MongoDB..."

                        sh "docker exec ${mongoContainerName} mongodump --archive=${env.backupFileMongo} --gzip"

                        echo "Backup created at ${env.backupFileMongo}"
                    } else {
                        echo "Container ${mongoContainerName} does not exist. Skipping backup."
                    }

                    if (env.redisExists) {
                        echo "Creating backup for Redis..."

                        sh "docker exec ${redisContainerName} redis-cli SAVE"

                        sh "docker exec ${redisContainerName} cp /data/dump.rdb ${env.backupFileRedis}"

                        echo "Backup created at ${env.backupFileRedis}"
                    } else {
                        echo "Container ${redisContainerName} does not exist. Skipping backup."
                    }
                }
            }
        }

        stage('Clone code') {
            steps {
                git url: 'https://github.com/TranMinhTruyen/work-flow', branch: 'main'
            }
        }

        stage('Install & build FE') {
            steps {
                dir('FE') {
                    script {
                        echo "Start build FE..."
                        sh """
                            yarn install
                            yarn build
                        """
                        echo "Build FE finish..."
                    }
                }
            }
        }

        stage('Deploy FE') {
            steps {
                dir('FE') {
                    echo "Start deploy FE..."
                    script {
                        // Clear folder html
                        sh "sudo rm -rf ${htmlDir}/*"

                        // Copy webpack bundle to html
                        sh "sudo mv dist/* ${htmlDir}"

                        // Check status nginx
                        def nginxStatus = sh(script:  "sudo systemctl is-active nginx", returnStatus: true)

                        if (nginxStatus == 0) {
                            echo "Nginx service is active, reload nginx..."
                            sh "sudo systemctl reload nginx"
                        } else {
                            echo "Nginx service deactive, start nginx..."
                            sh "sudo systemctl start nginx"
                        }
                    }
                    echo "Deploy FE finish..."
                }
            }
        }

        stage('Install & build BE') {
            steps {
                dir('BE') {
                    script {
                        echo "Start build BE..."
                        sh """
                            chmod +x gradlew
                            ./gradlew clean build -x test
                        """
                        echo "Build BE finish..."
                    }
                }
            }
        }

        stage('Deploy BE') {
            steps {
                echo "Start deploy BE..."
                script {
                    def springAppDirExists = sh(script: "test -d ${springAppDir} && echo 'true' || echo 'false'", returnStdout: true).trim()

                    if (springAppDirExists == 'true') {
                        // If folder exist
                        def checkSpringAppDir = sh(script: "sudo find ${springAppDir} -mindepth 1 -print -quit", returnStdout: true)

                        // If folder not empty clear folder
                        if (checkSpringAppDir == 0) {
                            sh "sudo rm -rf ${checkSpringAppDir}/*"
                        }
                    } else {
                        // If folder not exist
                        sh "mkdir -p '${springAppDir}'"
                    }

                    warFile = "${WORKSPACE}/BE/build/libs/work-flow.war"

                    echo "Checking for file: ${warFile}"

                    if (fileExists(warFile)) {
                        sh "sudo mv ${warFile} ${springAppDir}"

                        // Reload tomcat
                        sh "/opt/tomcat/bin/startup.sh"
                    } else {
                        error "File war not exists!"
                    }
                }
                echo "Deploy BE finish..."
            }
        }

        stage('Import backup') {
            steps {
                script {
                    def mongodb = sh(script: "docker exec ${mongoContainerName} test -f ${env.backupFileMongo} && echo 'true' || echo 'false'", returnStdout: true).trim()
                    def redis = sh(script: "docker exec ${redisContainerName} test -f ${env.backupFileRedis} && echo 'true' || echo 'false'", returnStdout: true).trim()

                    if (mongodb == 'true') {
                        echo "Start restore mongodb..."
                        sh "docker exec -i ${mongoContainerName} mongorestore --gzip --archive=${env.backupFileMongo} --db ${dbName}"
                    } else {
                        echo "File backup does not exist. Skipping restore."
                    }

                    if (redis == 'true') {
                        echo "Start restore redis..."
                        sh "docker exec ${redisContainerName} cp ${env.backupFileRedis} /data/dump.rdb"
                    } else {
                        echo "File backup does not exist. Skipping restore."
                    }
                }
            }
        }
    }
}